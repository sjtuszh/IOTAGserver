# 创建项目目录
$projectDir = "mqtt_server"
if (!(Test-Path -Path $projectDir)) {
    New-Item -ItemType Directory -Path $projectDir
}

# 切换到项目目录
Set-Location -Path $projectDir

# 创建 images 目录
$imagesDir = "images"
if (!(Test-Path -Path $imagesDir)) {
    New-Item -ItemType Directory -Path $imagesDir
}

# 创建 config.py
@"
# config.py

MQTT_BROKER = 'localhost'
MQTT_PORT = 1883
MQTT_TOPIC_SENSOR = 'sensor/data'
MQTT_TOPIC_IMAGE = 'sensor/image'
DATABASE = 'sensor_data.db'
IMAGES_FOLDER = 'images'
"@ | Out-File -FilePath "config.py" -Encoding utf8

# 创建 database.py
@"
import sqlite3
from config import DATABASE

def init_db():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS sensor_data (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            temperature INTEGER,
            ec INTEGER,
            par INTEGER
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS images (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            image_path TEXT
        )
    ''')
    conn.commit()
    conn.close()

def insert_sensor_data(temperature, ec, par):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO sensor_data (temperature, ec, par) VALUES (?, ?, ?)
    ''', (temperature, ec, par))
    conn.commit()
    conn.close()

def insert_image_data(image_path):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO images (image_path) VALUES (?)
    ''', (image_path,))
    conn.commit()
    conn.close()
"@ | Out-File -FilePath "database.py" -Encoding utf8

# 创建 mqtt_client.py
@"
import paho.mqtt.client as mqtt
import json
import base64
import os
from database import insert_sensor_data, insert_image_data
from config import MQTT_BROKER, MQTT_PORT, MQTT_TOPIC_SENSOR, MQTT_TOPIC_IMAGE, IMAGES_FOLDER

def on_connect(client, userdata, flags, rc):
    print(f'Connected with result code {rc}')
    client.subscribe(MQTT_TOPIC_SENSOR)
    client.subscribe(MQTT_TOPIC_IMAGE)

def on_message(client, userdata, msg):
    if msg.topic == MQTT_TOPIC_SENSOR:
        handle_sensor_data(msg.payload)
    elif msg.topic == MQTT_TOPIC_IMAGE:
        handle_image_data(msg.payload)

def handle_sensor_data(payload):
    data = json.loads(payload)
    temperature = data.get('temperature')
    ec = data.get('ec')
    par = data.get('par')
    insert_sensor_data(temperature, ec, par)

def handle_image_data(payload):
    image_data = base64.b64decode(payload)
    image_id = int.from_bytes(image_data[:4], byteorder='big')  # assuming the first 4 bytes are a unique image id
    image_path = os.path.join(IMAGES_FOLDER, f'image_{image_id}.jpg')
    with open(image_path, 'wb') as image_file:
        image_file.write(image_data[4:])
    insert_image_data(image_path)

client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message

def start_mqtt_client():
    client.connect(MQTT_BROKER, MQTT_PORT, 60)
    client.loop_start()
"@ | Out-File -FilePath "mqtt_client.py" -Encoding utf8

# 创建 app.py
@"
from flask import Flask, jsonify, send_file
import io
import sqlite3
from config import DATABASE, IMAGES_FOLDER
from mqtt_client import start_mqtt_client
from database import init_db
import os

app = Flask(__name__)

@app.route('/api/sensor_data', methods=['GET'])
def get_sensor_data():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM sensor_data ORDER BY timestamp DESC')
    rows = cursor.fetchall()
    conn.close()
    
    sensor_data = []
    for row in rows:
        sensor_data.append({
            'id': row[0],
            'timestamp': row[1],
            'temperature': row[2],
            'ec': row[3],
            'par': row[4]
        })
    
    return jsonify(sensor_data)

@app.route('/api/images/<int:image_id>', methods=['GET'])
def get_image(image_id):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('SELECT image_path FROM images WHERE id=?', (image_id,))
    row = cursor.fetchone()
    conn.close()

    if row:
        image_path = row[0]
        return send_file(image_path, mimetype='image/jpeg')
    else:
        return 'Image not found', 404

if __name__ == '__main__':
    init_db()           # 初始化数据库
    start_mqtt_client() # 启动MQTT客户端
    app.run(host='0.0.0.0', port=5000)
"@ | Out-File -FilePath "app.py" -Encoding utf8

# 创建 requirements.txt
@"
paho-mqtt
flask
"@ | Out-File -FilePath "requirements.txt" -Encoding utf8

# 创建 README.md
@"
# MQTT Server

## 简介
这是一个基于Python的MQTT服务器后台，用于接收传感器数据和图像，并将其存储在SQLite数据库中。图像存储在固定文件夹中，数据库中保存图像路径索引。该项目还提供了一个Flask API，用于访问存储的数据。

## 文件结构
- `app.py`: 主Flask应用
- `mqtt_client.py`: MQTT客户端和消息处理
- `database.py`: 数据库初始化和操作
- `config.py`: 配置文件（如MQTT代理地址、端口等）
- `requirements.txt`: Python依赖包列表
- `README.md`: 项目说明文档
- `images/`: 存储接收到的图像

## 安装
```bash
pip install -r requirements.txt
